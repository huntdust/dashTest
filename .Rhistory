#library(cluster)
#library(tidyverse)
# Provide the path to the data
pth  <- "C:/Users/huntdust/Desktop/ShinyServer/Gore_Cable2_Grid_Test3/"
#pth <- "//pilly/jaguar/interface/project/Gryffindor/Data_and_Results/Rosenberger_Cable2/Testing_Demate_Force_Meas2/"
parent <- "C:/Users/huntdust/Desktop/ShinyServer/"
path <- paste(parent, "Gore_Cable2_Grid_Test3")
# Used for converting mils to counts so user does not have to be concerened with motor steps
mils_to_counts = 254
# Used for converting mils to counts so user does not have to be concerened with motor steps
counts_to_mils = (1/254)
# Add this value to all force measurements to correct for the offset at 0 lbs
FORCE_CORRECTION_VALUE = 0
# Force the number of clusters to a desired value
# Only change this if you know what you are doing with clustering algorithms
num_clusters <- 3
clust_num_override <- TRUE
# Select the data file for use here
file <- "test_log.csv"
# Load the data
full_path <- paste(pth, file, sep = "/")
df <- read.csv(full_path, header = TRUE)
# Round off the values in the df
df <- round(df, 8)
# Convert the X_Position variable from encoder counts to mils
df$X_Position <- df$X_Position * counts_to_mils
# Add the force correction value
df$Force <- df$Force + FORCE_CORRECTION_VALUE
# Create the plot
title <- "Y-Z Position Vs Force"
p <- ggplot(data = df, mapping = aes(x = Y_Position, y = Z_Position, color = Force, group = Cycle)) +
geom_point() +
labs(x = "Y Offset (Mils)", y = "Z Offset (Mils)") +
ggtitle(title) +
scale_color_gradientn(colors = rainbow(10)) +
xlim(-4,4) +
ylim(-4,4) +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
# Create the plot
p <- ggplotly(p, tooltip = c("Cycle", "Y_Position", "Z_Position", "Force"))
p
# Print out the min and max forces as well as their cycle number and location
paste("Max Force:", max(df$Force), "on cycle", df$Cycle[which(df$Force == max(df$Force))],
"at Y-position", df$Y_Position[which(df$Force == max(df$Force))],"and Z-position", df$Z_Position[which(df$Force == max(df$Force))], sep = " ")
paste("Min Force:", min(df$Force), "on cycle", df$Cycle[which(df$Force == min(df$Force))],
"at Y-position", df$Y_Position[which(df$Force == min(df$Force))],"and Z-position", df$Z_Position[which(df$Force == min(df$Force))], sep = " ")
# fig <- plot_ly(df, x = ~Y_Position, y = ~Z_Position, color = ~Force, type = 'scatter', mode = 'markers',
#                 hoverinfo = 'text',
#                 text = ~paste('</br> Y Position: ', Y_Position,
#                               '</br> Z Position: ', Z_Position,
#                               '</br> Force (lbs): ', Force,
#                               '</br> Cycle: ', Cycle))
#
# fig <- fig %>% layout(
#             title = "Force Vs Y-Z Position",
#             scene = list(
#               xaxis = list(title = "Y Position"),
#               yaxis = list(title = "Z Position")
#             ))
#
# fig
# Selecte the data file for use here
file <- "mating_force_profile.csv"
# Load the data
full_path <- paste(pth, file, sep = "/")
df_mate <- read.csv(full_path, header = TRUE)
# Convert the X_Position variable from encoder counts to mils
df_mate$X_Position <- df_mate$X_Position * counts_to_mils
# Add the force correction value
df_mate$Force <- df_mate$Force + FORCE_CORRECTION_VALUE
# Round the data
#df <- round(df, 8)
# Create the highlight key
h <- highlight_key(df_mate, ~Cycle)
# Create the title for the plot
title <- "Force Vs Position During Mating"
# text = sprintf("<br>Force: %s<br>X Position: %s<br>Cycle: %s", Force, X_Position, Cycle)
# , text = ~paste('</br> X Position: ', ~X_Position,
#                                                                   '</br> Force: ', ~Force,
#                                                                   '</br> Cycle: ', ~Cycle)
p <- ggplot(data = h, mapping = aes(x = X_Position)) +
geom_line(size = 0.5, aes(y = Force, color = Cycle)) +
labs(x = "Axial Position (Mils)", y = "Force (lbs)") +
ggtitle(title) +
scale_color_gradientn(colors = rainbow(10)) +
theme_minimal() + # this theme makes the plot very similar to the default plotly aesthetic
theme(plot.title = element_text(hjust = 0.5))
# Enable the axies to automatically rescale when zooming in/out of the plot; tooltip specifies the data displayed on hover
p <- ggplotly(p, dynamicTicks = TRUE, tooltip = c("X_Position", "Force", "Cycle")) %>% layout(xaxis = list(autorange = FALSE))
# Clear R session
rm(list=ls())
# Prevents java OOM errors when trying to create the excel files
knitr::opts_chunk$set(echo = TRUE, fig.height = 7, fig.width = 10)
options(java.parameters = "-Xmx10g")
options(dplyr.summarise.inform = FALSE)
#library(openxlsx)
#library(xlsx)
library(readxl)
library(dplyr)
library(data.table)
library(gtools) # enables the mixed sort function
library(ggplot2)
library(reshape2)
library(plotly)
library(readbulk)
library(stringr)
library(tictoc)
#library(factoextra)
#library(cluster)
#library(tidyverse)
# Provide the path to the data
pth  <- "C:/Users/huntdust/Desktop/ShinyServer/Gore_Cable2_Grid_Test3/"
#pth <- "//pilly/jaguar/interface/project/Gryffindor/Data_and_Results/Rosenberger_Cable2/Testing_Demate_Force_Meas2/"
parent <- "C:/Users/huntdust/Desktop/ShinyServer/"
path <- paste(parent, "Gore_Cable2_Grid_Test3")
# Used for converting mils to counts so user does not have to be concerened with motor steps
mils_to_counts = 254
# Used for converting mils to counts so user does not have to be concerened with motor steps
counts_to_mils = (1/254)
# Add this value to all force measurements to correct for the offset at 0 lbs
FORCE_CORRECTION_VALUE = 0
# Force the number of clusters to a desired value
# Only change this if you know what you are doing with clustering algorithms
num_clusters <- 3
clust_num_override <- TRUE
# Select the data file for use here
file <- "test_log.csv"
# Load the data
full_path <- paste(pth, file, sep = "/")
df <- read.csv(full_path, header = TRUE)
# Round off the values in the df
df <- round(df, 8)
# Convert the X_Position variable from encoder counts to mils
df$X_Position <- df$X_Position * counts_to_mils
# Add the force correction value
df$Force <- df$Force + FORCE_CORRECTION_VALUE
# Create the plot
title <- "Y-Z Position Vs Force"
p <- ggplot(data = df, mapping = aes(x = Y_Position, y = Z_Position, color = Force, group = Cycle)) +
geom_point() +
labs(x = "Y Offset (Mils)", y = "Z Offset (Mils)") +
ggtitle(title) +
scale_color_gradientn(colors = rainbow(10)) +
xlim(-4,4) +
ylim(-4,4) +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
# Create the plot
p <- ggplotly(p, tooltip = c("Cycle", "Y_Position", "Z_Position", "Force"))
p
# Print out the min and max forces as well as their cycle number and location
paste("Max Force:", max(df$Force), "on cycle", df$Cycle[which(df$Force == max(df$Force))],
"at Y-position", df$Y_Position[which(df$Force == max(df$Force))],"and Z-position", df$Z_Position[which(df$Force == max(df$Force))], sep = " ")
paste("Min Force:", min(df$Force), "on cycle", df$Cycle[which(df$Force == min(df$Force))],
"at Y-position", df$Y_Position[which(df$Force == min(df$Force))],"and Z-position", df$Z_Position[which(df$Force == min(df$Force))], sep = " ")
# fig <- plot_ly(df, x = ~Y_Position, y = ~Z_Position, color = ~Force, type = 'scatter', mode = 'markers',
#                 hoverinfo = 'text',
#                 text = ~paste('</br> Y Position: ', Y_Position,
#                               '</br> Z Position: ', Z_Position,
#                               '</br> Force (lbs): ', Force,
#                               '</br> Cycle: ', Cycle))
#
# fig <- fig %>% layout(
#             title = "Force Vs Y-Z Position",
#             scene = list(
#               xaxis = list(title = "Y Position"),
#               yaxis = list(title = "Z Position")
#             ))
#
# fig
# Selecte the data file for use here
file <- "mating_force_profile.csv"
# Load the data
full_path <- paste(pth, file, sep = "/")
df_mate <- read.csv(full_path, header = TRUE)
# Convert the X_Position variable from encoder counts to mils
df_mate$X_Position <- df_mate$X_Position * counts_to_mils
# Add the force correction value
df_mate$Force <- df_mate$Force + FORCE_CORRECTION_VALUE
# Round the data
#df <- round(df, 8)
# Create the highlight key
h <- highlight_key(df_mate, ~Cycle)
# Create the title for the plot
title <- "Force Vs Position During Mating"
# text = sprintf("<br>Force: %s<br>X Position: %s<br>Cycle: %s", Force, X_Position, Cycle)
# , text = ~paste('</br> X Position: ', ~X_Position,
#                                                                   '</br> Force: ', ~Force,
#                                                                   '</br> Cycle: ', ~Cycle)
p <- ggplot(data = h, mapping = aes(x = X_Position)) +
geom_line(size = 0.5, aes(y = Force, color = Cycle)) +
labs(x = "Axial Position (Mils)", y = "Force (lbs)") +
ggtitle(title) +
scale_color_gradientn(colors = rainbow(10)) +
theme_minimal() + # this theme makes the plot very similar to the default plotly aesthetic
theme(plot.title = element_text(hjust = 0.5))
# Enable the axies to automatically rescale when zooming in/out of the plot; tooltip specifies the data displayed on hover
p <- ggplotly(p, dynamicTicks = TRUE, tooltip = c("X_Position", "Force", "Cycle")) %>% layout(xaxis = list(autorange = FALSE))
# Select which plot manipulation buttons are displayed in the top right
p <- config(p, modeBarButtonsToRemove = c("lasso2d", "select2d", "toggleSpikelines","autoScale2d"))
# Specify the operation of the highlight mechanic
p <- highlight(p, on = "plotly_click", off = "plotly_doubleclick", color = "black")
# Display the plot
p
# Selecte the data file for use here
file <- "demating_force_profile.csv"
# Load the data
full_path <- paste(pth, file, sep = "")
df_demate <- read.csv(full_path, header = TRUE)
# Convert the X_Position variable from encoder counts to mils
df_demate$X_Position <- df_demate$X_Position * counts_to_mils
# Add the force correction value
df_demate$Force <- df_demate$Force + FORCE_CORRECTION_VALUE
# Round the data
#df_demate <- round(df_demate, 8)
# Create the highlight key
h <- highlight_key(df_demate, ~Cycle)
title <- "Force Vs Position During Demating"
p <- ggplot(data = h, mapping = aes(x = X_Position)) +
geom_line(size = 0.5, aes(y = Force, color = Cycle)) +
labs(x = "Axial Position (Mils)", y = "Force (lbs)", col = "Cycle") +
ggtitle(title) +
scale_color_gradientn(colors = rainbow(10)) +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
p <- ggplotly(p, dynamicTicks = TRUE, tooltip = c("X_Position", "Force", "Cycle")) %>% layout(xaxis = list(autorange = FALSE))
p <- config(p, modeBarButtonsToRemove = c("lasso2d", "select2d", "toggleSpikelines","autoScale2d"))
p <- highlight(p, on = "plotly_click", off = "plotly_doubleclick", color = "black")
p
# Load the data
log_file <- paste(pth, "test_log.csv", sep = "")
df <- read.csv(log_file, header = TRUE)
# Round the data
df <- round(df, 8)
# Force over time
plt <- plot_ly(df, x = ~Cycle, y = ~Force, type = 'scatter', mode = "lines",
hoverinfo = 'text',
text = ~paste('</br> Force (lbs): ', Force,
'</br> Cycle: ', Cycle))
plt <- plt %>% layout(title = "Mating Force For Each Cycle",
xaxis = list(title = "Cycle Number"),
yaxis = list(title = "Force (lbs)"))
plt
# Linear positions Over time
plt <- plot_ly(df, x = ~Cycle)
plt <- plt %>% add_trace(y = ~X_Position, name = "X Position", type = 'scatter', mode = 'lines',
hoverinfo = 'text',
text = ~paste('</br> X Position (mils): ', X_Position,
'</br> Cycle: ', Cycle))
plt <- plt %>% add_trace(y = ~Y_Position, name = "Y Position", type = 'scatter', mode = 'lines',
hoverinfo = 'text',
text = ~paste('</br> Y Position (mils): ', Y_Position,
'</br> Cycle: ', Cycle))
plt <- plt %>% add_trace(y = ~Z_Position, name = "Z Position", type = 'scatter', mode = 'lines',
hoverinfo = 'text',
text = ~paste('</br> Z Position (mils): ', Z_Position,
'</br> Cycle: ', Cycle))
plt <- plt %>% layout(title = "Linear Stage Position Over Time",
xaxis = list(title = "Cycle Number"),
yaxis = list(title = "Stage Position (mils)"))
plt
# Linear Errors Over Time
plt <- plot_ly(df, x = ~Cycle)
plt <- plt %>% add_trace(y = ~ER_X_Position, name = "X Position Error", type = 'scatter', mode = 'lines',
hoverinfo = 'text',
text = ~paste('</br> X Position Error (mils): ', ER_X_Position,
'</br> Cycle: ', Cycle))
plt <- plt %>% add_trace(y = ~ER_Y_Position, name = "Y Position Error", type = 'scatter', mode = 'lines',
hoverinfo = 'text',
text = ~paste('</br> Y Position Error (mils): ', ER_Y_Position,
'</br> Cycle: ', Cycle))
plt <- plt %>% add_trace(y = ~ER_Z_Position, name = "Z Position Error", type = 'scatter', mode = 'lines',
hoverinfo = 'text',
text = ~paste('</br> Z Position Error (mils): ', ER_Z_Position,
'</br> Cycle: ', Cycle))
plt <- plt %>% layout(title = "Linear Stage Error Over Time",
xaxis = list(title = "Cycle Number"),
yaxis = list(title = "Stage Error (mils)"))
plt
# Rotary positions Over time
plt <- plot_ly(df, x = ~Cycle)
plt <- plt %>% add_trace(y = ~TX_Position, name = "Theta X Position", type = 'scatter', mode = 'lines',
hoverinfo = 'text',
text = ~paste('</br> Theta X Position (degrees): ', TX_Position,
'</br> Cycle: ', Cycle))
plt <- plt %>% add_trace(y = ~TY_Position, name = "Theta Y Position", type = 'scatter', mode = 'lines',
hoverinfo = 'text',
text = ~paste('</br> Theta Y Position (degrees): ', TY_Position,
'</br> Cycle: ', Cycle))
plt <- plt %>% add_trace(y = ~TZ_Position, name = "Theta Z Position", type = 'scatter', mode = 'lines',
hoverinfo = 'text',
text = ~paste('</br> Theta Z Position (degrees): ', TZ_Position,
'</br> Cycle: ', Cycle))
plt <- plt %>% layout(title = "Rotary Stage Position Over Time",
xaxis = list(title = "Cycle Number"),
yaxis = list(title = "Stage Position (degrees)"))
plt
# Rotary Errors Over Time
plt <- plot_ly(df, x = ~Cycle)
plt <- plt %>% add_trace(y = ~ER_TX_Position, name = "Theta X Position Error", type = 'scatter', mode = 'lines',
hoverinfo = 'text',
text = ~paste('</br> Theta X Error (degrees): ', ER_TX_Position,
'</br> Cycle: ', Cycle))
plt <- plt %>% add_trace(y = ~ER_TY_Position, name = "Theta Y Position Error", type = 'scatter', mode = 'lines',
hoverinfo = 'text',
text = ~paste('</br> Theta Y Error (degrees): ', ER_TY_Position,
'</br> Cycle: ', Cycle))
plt <- plt %>% add_trace(y = ~ER_TZ_Position, name = "Theta Z Position Error", type = 'scatter', mode = 'lines',
hoverinfo = 'text',
text = ~paste('</br> Theta Z Error (degrees): ', ER_TZ_Position,
'</br> Cycle: ', Cycle))
plt <- plt %>% layout(title = "Rotary Stage Error Over Time",
xaxis = list(title = "Cycle Number"),
yaxis = list(title = "Stage Error (degrees)"))
plt
# Old code
#####
# # All positions Over time
# plt <- plot_ly(df, x = ~Cycle)
# plt <- plt %>% add_trace(y = ~X_Position, name = "X Position", type = 'scatter', mode = 'lines')
# plt <- plt %>% add_trace(y = ~Y_Position, name = "Y Position", type = 'scatter', mode = 'lines')
# plt <- plt %>% add_trace(y = ~Z_Position, name = "Z Position", type = 'scatter', mode = 'lines')
# plt <- plt %>% add_trace(y = ~TX_Position, name = "Theta X Position", type = 'scatter', mode = 'lines')
# plt <- plt %>% add_trace(y = ~TY_Position, name = "Theta Y Position", type = 'scatter', mode = 'lines')
# plt <- plt %>% add_trace(y = ~TZ_Position, name = "Theta Z Position", type = 'scatter', mode = 'lines')
# plt <- plt %>% layout(title = "Stage Position Over Time",
#                       xaxis = list(title = "Cycle Number"),
#                       yaxis = list(title = "Stage Position (mils or degrees)"))
# plt
# # All Errors Over Time
# plt <- plot_ly(df, x = ~Cycle)
# plt <- plt %>% add_trace(y = ~ER_X_Position, name = "X Position Error", type = 'scatter', mode = 'lines')
# plt <- plt %>% add_trace(y = ~ER_Y_Position, name = "Y Position Error", type = 'scatter', mode = 'lines')
# plt <- plt %>% add_trace(y = ~ER_Z_Position, name = "Z Position Error", type = 'scatter', mode = 'lines')
# plt <- plt %>% add_trace(y = ~ER_TX_Position, name = "Theta X Position Error", type = 'scatter', mode = 'lines')
# plt <- plt %>% add_trace(y = ~ER_TY_Position, name = "Theta Y Position Error", type = 'scatter', mode = 'lines')
# plt <- plt %>% add_trace(y = ~ER_TZ_Position, name = "Theta Z Position Error", type = 'scatter', mode = 'lines')
# plt <- plt %>% layout(title = "Stage Positional Error Over Time",
#                       xaxis = list(title = "Cycle Number"),
#                       yaxis = list(title = "Stage Error (mils or degrees)"))
# plt
# # Linear Stage Position and Error
# ay <- list(
#   tickfont = list(color = "red"),
#   overlaying = "y",
#   side = "right",
#   title = "Stage Error"
# )
# plt <- plot_ly(df, x = ~Cycle)
# plt <- plt %>% add_trace(y = ~X_Position, name = "X Position", type = 'scatter', mode = 'lines')
# plt <- plt %>% add_trace(y = ~Y_Position, name = "Y Position", type = 'scatter', mode = 'lines')
# plt <- plt %>% add_trace(y = ~Z_Position, name = "Z Position", type = 'scatter', mode = 'lines')
# plt <- plt %>% add_trace(y = ~ER_X_Position, name = "X Position Error", yaxis = "y2", type = 'scatter', mode = 'lines')
# plt <- plt %>% add_trace(y = ~ER_Y_Position, name = "Y Position Error", yaxis = "y2", type = 'scatter', mode = 'lines')
# plt <- plt %>% add_trace(y = ~ER_Z_Position, name = "Z Position Error", yaxis = "y2", type = 'scatter', mode = 'lines')
# plt <- plt %>% layout(title = "Linear Stage Position And Error Over Time",
#                       xaxis = list(title = "Cycle Number"),
#                       yaxis = list(title = "Stage Position"),
#                       yaxis2 = ay)
# plt
# Rotational Stage Position and Error
# ay <- list(
#   tickfont = list(color = "red"),
#   overlaying = "y",
#   side = "right",
#   title = "Stage Error"
# )
# plt <- plot_ly(df, x = ~Cycle)
# plt <- plt %>% add_trace(y = ~TX_Position, name = "Theta X Position", type = 'scatter', mode = 'lines')
# plt <- plt %>% add_trace(y = ~TY_Position, name = "Theta Y Position", type = 'scatter', mode = 'lines')
# plt <- plt %>% add_trace(y = ~TZ_Position, name = "Theta Z Position", type = 'scatter', mode = 'lines')
# plt <- plt %>% add_trace(y = ~ER_TX_Position, name = "Theta X Position Error", yaxis = "y2", type = 'scatter', mode = 'lines')
# plt <- plt %>% add_trace(y = ~ER_TY_Position, name = "Theta Y Position Error", yaxis = "y2", type = 'scatter', mode = 'lines')
# plt <- plt %>% add_trace(y = ~ER_TZ_Position, name = "Theta Z Position Error", yaxis = "y2", type = 'scatter', mode = 'lines')
# plt <- plt %>% layout(title = "Rotational Stage Position And Error Over Time",
#                       xaxis = list(title = "Cycle Number"),
#                       yaxis = list(title = "Stage Position"),
#                       yaxis2 = ay)
# plt
#####
shiny::runApp('dashTest')
runApp('dashTest')
shiny::runApp('dashTest')
runApp('dashTest')
runApp('dashTest')
runApp('dashTest')
runApp('dashTest')
runApp('dashTest')
runApp('dashTest')
runApp('dashTest')
runApp('dashTest')
runApp('dashTest')
render(input = "Gryffindor_Force_and_Position_Plots_MASTER.Rmd", "html_document", output_file = 'testRender.html')
render(input = "Gryffindor_Force_and_Position_Plots_MASTER.Rmd", "html_document", output_file = 'testRender.html')
render(input = "C:/home/dashTest/Gryffindor_Force_and_Position_Plots_MASTER.Rmd", "html_document", output_file = 'testRender.html')
runApp('dashTest')
runApp('dashTest')
render(input = "C:/home/dashTest/Gryffindor_Force_and_Position_Plots_MASTER.Rmd", "html_document", output_file = 'testRender.html')
runApp('dashTest')
runApp('dashTest')
runApp('dashTest')
render(input = "C:/home/dashTest/Gryffindor_Force_and_Position_Plots_MASTER.Rmd", "html_fragment", output_file = "fragmentTest.html")
render(input = "C:/home/dashTest/Gryffindor_Force_and_Position_Plots_MASTER.Rmd", "html_fragment", output_file = "fragmentTest.html")
render(input = "C:/home/dashTest/Gryffindor_Force_and_Position_Plots_MASTER.Rmd", "html_document", output_file = "fragmentTest.html")
render(input = "C:/home/dashTest/Gryffindor_Force_and_Position_Plots_MASTER.Rmd", "html_fragment", output_file = "fragmentTest.html")
render(input = "C:/home/dashTest/Gryffindor_Force_and_Position_Plots_MASTER.Rmd", "html_fragment", output_file = "fragmentTest.html")
render(input = "C:/home/dashTest/Gryffindor_Force_and_Position_Plots_MASTER.Rmd", "html_fragment", output_file = "fragmentTest.html")
render(input = "C:/home/dashTest/Gryffindor_Force_and_Position_Plots_MASTER.Rmd", "html_fragment", output_file = "fragmentTest.html")
render(input = "C:/home/dashTest/Gryffindor_Force_and_Position_Plots_MASTER.Rmd", "html_fragment", output_file = "fragmentTest.html")
render(input = "C:/home/dashTest/Gryffindor_Force_and_Position_Plots_MASTER.Rmd", "html_document", output_file = "fragmentTest.html")
render(input = "C:/home/dashTest/Gryffindor_Force_and_Position_Plots_MASTER.Rmd", "html_document", output_file = "fragmentTest.html")
render(input = "C:/home/dashTest/Gryffindor_Force_and_Position_Plots_MASTER.Rmd", "html_document", output_file = "fragmentTest.html")
render(input = "C:/home/dashTest/Gryffindor_Force_and_Position_Plots_MASTER.Rmd", "html_document", output_file = "fragmentTest.html")
render(input = "C:/home/dashTest/Gryffindor_Force_and_Position_Plots_MASTER.Rmd", "html_fragment", output_file = "fragmentTest2.html")
runApp('dashTest')
runApp('dashTest')
runApp('dashTest')
runApp('dashTest')
runApp('dashTest')
runApp('dashTest')
runApp('dashTest')
runApp('dashTest')
runApp('dashTest')
runApp('dashTest')
pth  <- "C:/Users/huntdust/Desktop/ShinyServer/Gore_Cable2_Grid_Test3/"
parent <- "C:/Users/huntdust/Desktop/ShinyServer/"
path <- paste(parent, "Gore_Cable2_Grid_Test3")
path
path <- gsub(" ", "", pth)
path
pth
runApp('dashTest')
render(input = "C:/home/dashTest/Gryffindor_Force_and_Position_Plots_MASTER.Rmd", "html_document", output_file = "test.html")
runApp('dashTest')
runApp('dashTest')
source(file.path("server.R"), local = TRUE)$value  #
source(file.path("C:/home/dashTest/server.R"), local = TRUE)$value  #
path <- paste(parent, input$analysisSelection)
runApp('dashTest')
runApp('dashTest')
runApp('dashTest')
runApp('dashTest')
runApp('dashTest')
pth
runApp('dashTest')
runApp('dashTest')
runApp('dashTest')
pth
print(pth)
runApp('dashTest')
runApp('dashTest')
runApp('dashTest')
runApp('dashTest')
runApp('dashTest')
runApp('dashTest')
test <- paste('test','test2','test3')
test
runApp('dashTest')
runApp('dashTest')
RMDPath <- "C:/home/home/dashTest/rmd/"
analysistypes <- list.files(RMDPath)
analysistypes
analysistypes <- list.files(RMDPath)
RMDPath
RMDPath <- "C:/home/home/dashTest/rmd"
analysistypes <- list.files(RMDPath)
analysistypes
RMDPath <- "C:/home/dashTest/rmd/"
analysistypes <- list.files(RMDPath)
analysistypes
runApp('dashTest')
runApp('dashTest')
runApp('dashTest')
runApp('dashTest')
runApp('dashTest')
runApp()
runApp('dashTest')
runApp('dashTest')
runApp('dashTest')
runApp('dashTest')
runApp()
runApp('dashTest')
runApp('dashTest')
runApp('dashTest')
runApp('dashTest')
runApp('dashTest')
input_file <- paste(basepath, 'rmd/', input$analysisFile)
basepath <- 'C:/home/dashTest/'
input_file <- paste(basepath, 'rmd/', input$analysisFile)
runApp('dashTest')
runApp('dashTest')
runApp('dashTest')
runApp('dashTest')
runApp('dashTest')
install.packages('plotly')
shiny::runApp('dashTest')
runApp('dashTest')
runApp('dashTest')
runApp('dashTest')
runApp('dashTest')
runApp('dashTest')
runApp('dashTest')
runApp('dashTest')
runApp('dashTest')
runApp('dashTest')
runApp('dashTest')
shiny::runApp()
runApp()
shiny::runApp()
runApp()
runApp()
